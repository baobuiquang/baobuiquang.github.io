I"¡_<h2 id="description">Description</h2>

<p>The cryptography technique can be good, but the implementation is bad. Do you know the weakness of AES-ECB?</p>

<p>Netcat <code class="language-plaintext highlighter-rouge">nc 61.28.237.24 30300</code></p>

<p>File <code class="language-plaintext highlighter-rouge">server.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">select</span> <span class="kn">import</span> <span class="n">select</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">padding</span><span class="p">(</span><span class="n">plaintext</span><span class="p">):</span>

    <span class="n">plaintext_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
    <span class="n">padding_length</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">if</span> <span class="n">plaintext_length</span> <span class="o">%</span> <span class="mi">32</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">padding_length</span> <span class="o">=</span> <span class="p">(</span><span class="n">plaintext_length</span> <span class="o">//</span> <span class="mi">32</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">32</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">padding_length</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">padding_length</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="s">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span> <span class="c1"># TODO 
</span>    <span class="n">key</span> <span class="o">=</span> <span class="s">"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"</span> <span class="c1"># TODO
</span>    
    <span class="n">padding_character</span> <span class="o">=</span> <span class="s">"D"</span>
    
    <span class="k">assert</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="o">==</span> <span class="mi">32</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">32</span><span class="p">)</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">)</span>

    <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"Welcome to AES-ECB Encryption Machine. </span><span class="se">\n</span><span class="s">Please give us your plaintext, we'll give you its ciphertext!!!!"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">=====================================</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">Your input: '</span><span class="p">)</span>
            <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>

            <span class="n">rlist</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">],</span> <span class="p">[],</span> <span class="p">[])</span>

            <span class="n">inp</span> <span class="o">=</span> <span class="s">''</span>
            <span class="k">if</span> <span class="n">rlist</span><span class="p">:</span>
                <span class="n">user_input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">rstrip</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

            <span class="n">plaintext</span> <span class="o">=</span> <span class="n">user_input</span> <span class="o">+</span> <span class="n">flag</span>
            <span class="n">padding_length</span> <span class="o">=</span> <span class="n">padding</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
            <span class="n">plaintext</span> <span class="o">=</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="n">padding_length</span><span class="p">,</span> <span class="n">padding_character</span><span class="p">)</span>
            
            <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">'The ciphertext:</span><span class="se">\n</span><span class="s">{}</span><span class="se">\n\n</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">((</span><span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)).</span><span class="n">encode</span><span class="p">(</span><span class="s">'hex'</span><span class="p">)))</span>
        <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
            <span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="approach">Approach</h2>

<p>Netcat:</p>

<p><img src="../post-img/ctf-aes-ecb/1.png" alt="CTF" /></p>

<p>From the description, we know that the encryption used here is AES - Advanced Encryption Standard, ECB mode. (Without description, we can determine the encryption type by the module imported in server.py)</p>

<p>AES - Advanced Encryption Standard: <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Wikipedia Advanced Encryption Standard</a></p>

<p>Block cipher mode of operation: <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation">Wikipedia Block cipher mode of operation</a></p>

<p>By looking at the script, we can see that the flag is 32 bytes long, as is the key. The encryption method works like this: Because itâ€™s ECB, the plaintext will be split into 16-byte blocks, with each block using the AES encryption function with the key provided in the file.</p>

<p><img src="../post-img/ctf-aes-ecb/2.svg" alt="CTF" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plaintext</span> <span class="o">=</span> <span class="n">user_input</span> <span class="o">+</span> <span class="n">flag</span>
<span class="n">padding_length</span> <span class="o">=</span> <span class="n">padding</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
<span class="n">plaintext</span> <span class="o">=</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="n">padding_length</span><span class="p">,</span> <span class="n">padding_character</span><span class="p">)</span>
</code></pre></div></div>

<p>Before the encryption, the script requests an input to be encrypted, the input is concatenated with the flag, and padding is used to complete the last blocks, for example, assuming the padding character is <code class="language-plaintext highlighter-rouge">_</code>, the given input is <code class="language-plaintext highlighter-rouge">B</code>, and the flag is <code class="language-plaintext highlighter-rouge">MY-CTF{My_name_is_Bui_Quang_Bao}</code>. The plaintext before encryption will look like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Plaintext</span><span class="p">:</span> <span class="n">BMY</span><span class="o">-</span><span class="n">CTF</span><span class="p">{</span><span class="n">My_name_is_Bui_Quang_Bao</span><span class="p">}</span><span class="n">_______________________________</span>

<span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">BMY</span><span class="o">-</span><span class="n">CTF</span><span class="p">{</span><span class="n">My_name_</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="n">is_Bui_Quang_Bao</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="p">}</span><span class="n">_______________</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>What happen if we give the input <code class="language-plaintext highlighter-rouge">BBBBBBBBBBBBBBB</code>?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Plaintext</span><span class="p">:</span> <span class="n">BBBBBBBBBBBBBBBMY</span><span class="o">-</span><span class="n">CTF</span><span class="p">{</span><span class="n">My_name_is_Bui_Quang_Bao</span><span class="p">}</span><span class="n">_________________</span>

<span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">BBBBBBBBBBBBBBBM</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="n">Y</span><span class="o">-</span><span class="n">CTF</span><span class="p">{</span><span class="n">My_name_is</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="n">_Bui_Quang_Bao</span><span class="p">}</span><span class="n">_</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>The lack of diffusion is the Achillesâ€™ heel of this AES-ECB encryption. ECB does not hide data patterns well since it encrypts identical plaintext blocks into similar ciphertext blocks.</p>

<p>So, the idea to exploit this weakness is brute force attack, every single byte of the flag.</p>

<p>With the input is <code class="language-plaintext highlighter-rouge">B</code> :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">B</span><span class="err">???????????????</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="err">????????????????</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="err">?</span><span class="n">_______________</span> <span class="o">--&gt;</span> <span class="n">c03</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>With the input is <code class="language-plaintext highlighter-rouge">x + pad_char * 15</code> (we are assuming that <code class="language-plaintext highlighter-rouge">pad_char</code> is <code class="language-plaintext highlighter-rouge">_</code>, <code class="language-plaintext highlighter-rouge">x</code> is one character in ASCII)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">x_______________</span> <span class="o">--&gt;</span> <span class="n">c1</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>Have you realized anything yet?</p>

<p>If we brute force attack for the character <code class="language-plaintext highlighter-rouge">x</code>, we will know the last character of the flag when the block <code class="language-plaintext highlighter-rouge">c1</code> is equal to the block <code class="language-plaintext highlighter-rouge">c03</code>!</p>

<p>Continue with <code class="language-plaintext highlighter-rouge">BB</code>, we will have the last 2 character of the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">BB</span><span class="err">??????????????</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="err">????????????????</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="err">?</span><span class="p">}</span><span class="n">______________</span> <span class="o">--&gt;</span> <span class="n">c03</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">x</span><span class="p">}</span><span class="n">______________</span> <span class="o">--&gt;</span> <span class="n">c1</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>Continue with <code class="language-plaintext highlighter-rouge">BBB</code>, we will have the last 3 character of the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">BBB</span><span class="err">?????????????</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="err">????????????????</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="err">??!</span><span class="p">}</span><span class="n">____________</span> <span class="o">--&gt;</span> <span class="n">c03</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Block</span> <span class="mi">1</span><span class="p">:</span> <span class="n">x</span><span class="err">?!</span><span class="p">}</span><span class="n">____________</span> <span class="o">--&gt;</span> <span class="n">c1</span>
<span class="n">Block</span> <span class="mi">2</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">3</span><span class="p">:</span> <span class="n">________________</span>
<span class="n">Block</span> <span class="mi">4</span><span class="p">:</span> <span class="n">________________</span>
</code></pre></div></div>

<p>Now we just need to write a script to do the attack for us.</p>

<h2 id="solution">Solution</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="k">def</span> <span class="nf">cls</span><span class="p">():</span> <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">'cls'</span><span class="p">)</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"61.28.237.24"</span><span class="p">,</span> <span class="mi">30300</span><span class="p">)</span>
<span class="n">conn</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">":"</span><span class="p">)</span>

<span class="n">pad_char</span> <span class="o">=</span> <span class="s">"D"</span>
<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">33</span><span class="p">):</span>
    <span class="n">send_txt</span> <span class="o">=</span> <span class="s">"B"</span> <span class="o">*</span> <span class="n">i</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">send_txt</span><span class="p">)</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">c01</span><span class="p">,</span> <span class="n">c02</span><span class="p">,</span> <span class="n">c03</span><span class="p">,</span> <span class="n">c04</span> <span class="o">=</span> <span class="n">code</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">32</span><span class="p">:</span><span class="mi">64</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">64</span><span class="p">:</span><span class="mi">96</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">96</span><span class="p">:</span><span class="mi">128</span><span class="p">]</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">":"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">127</span><span class="p">):</span>
        <span class="n">char</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
        <span class="n">send_txt</span> <span class="o">=</span> <span class="n">char</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">pad_char</span> <span class="o">*</span> <span class="mi">16</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">send_txt</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
        <span class="n">code</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
        <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">,</span> <span class="n">c4</span> <span class="o">=</span> <span class="n">code</span><span class="p">[:</span><span class="mi">32</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">32</span><span class="p">:</span><span class="mi">64</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">64</span><span class="p">:</span><span class="mi">96</span><span class="p">],</span> <span class="n">code</span><span class="p">[</span><span class="mi">96</span><span class="p">:</span><span class="mi">128</span><span class="p">]</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">":"</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c03</span><span class="p">):</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="n">char</span> <span class="o">+</span> <span class="n">flag</span>
            <span class="n">cls</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span>
                <span class="s">"Connection: 61.28.237.24 - Port: 30300 - buiquangbao</span><span class="se">\n</span><span class="s">Cracking AES-ECB Encryption...</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"&gt;&gt; "</span><span class="p">,</span> <span class="n">flag</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Block 1:"</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Block 2:"</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span>
                  <span class="s">"</span><span class="se">\n</span><span class="s">Block 3:"</span><span class="p">,</span> <span class="n">c3</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Block 4:"</span><span class="p">,</span> <span class="n">c4</span><span class="p">)</span>
            <span class="k">break</span>

<span class="n">cls</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Flag cracked!</span><span class="se">\n\n</span><span class="s">&gt;&gt; "</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Terminal and result:</p>

<p><img src="../post-img/ctf-aes-ecb/3.gif" alt="CTF" /></p>

<p>Case closed!</p>
:ET
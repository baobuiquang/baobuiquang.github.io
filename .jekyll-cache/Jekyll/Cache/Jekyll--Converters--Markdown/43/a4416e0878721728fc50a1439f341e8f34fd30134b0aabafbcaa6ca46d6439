I"Ó<p>Angular is a TypeScript-based framework for building user interfaces. It was developed at Google and released in 2016 as the sequel to AngularJS.</p>

<p>As an Angular developer, you hit the ground running with its extremely powerful CLI tool.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng new my-app
</code></pre></div></div>

<p>When you generate your initial application, it comes pre-configured with routing a testing framework and your favorite style preprocessor.</p>

<p>In addition, the magic <code class="language-plaintext highlighter-rouge">ng add</code> command can turn your app into a progressive web app, add server-side rendering, firebase support, and do a whole bunch of other cool stuff.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng add @angular/pwa
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng add @nguniversal/express-engine
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng add @angular/fire
</code></pre></div></div>

<p>But at its core, Angular is just a component-based UI library.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng generate component navbar
</code></pre></div></div>

<p>We can create a component with the CLI and if we go into its TypeScript file, youâ€™ll notice the component decorator which makes this TypeScript class a component.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
	<span class="c1">//...</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">NavBarComponent</span> <span class="p">{</span>
	<span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Any properties on this class are considered reactive states, and when their values change, the component will re-render the UI. For example, we can bind the property to HTML using double braces in the template.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
	<span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-navbar</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">template</span><span class="p">:</span> <span class="s2">`
		&lt;p&gt; 8 &lt;/p&gt;
	`</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">NavBarComponent</span> <span class="p">{</span>
	<span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//State</span>
<span class="p">}</span>
</code></pre></div></div>

<p>From there, we can add a button that increments this value every time itâ€™s clicked. We add the event name on the left side in parentheses, then an expression on the right side. In this case, it points to a method in our class. Each time the button is clicked, it calls the method which changes the state and re-render the UI.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
	<span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-navbar</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">template</span><span class="p">:</span> <span class="s2">`
		&lt;p&gt; 8 &lt;/p&gt;
		&lt;button (click)="addOne()"&gt;
			Add
		&lt;/button&gt;
	`</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">NavBarComponent</span> <span class="p">{</span>
	<span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nx">addOne</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Angular also has a variety of directives for building complex templates.</p>

<p>Use <code class="language-plaintext highlighter-rouge">ngIf</code> to handle conditional logic.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- In Component --&gt;</span>
<span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"count &gt;= 10"</span><span class="nt">&gt;</span> 8 <span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>Or if you have an iterable value, use <code class="language-plaintext highlighter-rouge">ngFor</code> to loop over it.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- In Component --&gt;</span>
<span class="nt">&lt;p</span> <span class="na">*ngFor=</span><span class="s">"let item of items"</span><span class="nt">&gt;</span>  <span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<p>But where angular really excels is handling complexity. And one of its primary tools for doing so is called dependency injection.</p>

<p>When your app grows to hundreds of components, youâ€™ll likely need a way to share data and functionality between them.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ng generate service count
</code></pre></div></div>

<p>We can take our component logic here and extract it into a service, which can be treated as a global singleton throughout the application.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
	<span class="na">provideIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">MyAddOneService</span> <span class="p">{</span>
	<span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="nx">addOne</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now any component that wants to use this state or logic can simply add this class to its constructor. The end result is a simple and reliable way to compose complex applications.</p>
:ET
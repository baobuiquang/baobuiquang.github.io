I"…<h2 id="binary"><strong>Binary</strong></h2>
<ul>
  <li>We use computers everyday</li>
  <li>Inside a computer are ‚Äú0s and 1s‚Äù
    <ul>
      <li>Computers use the binary number system to represent info
        <ul>
          <li>How do computers represent info with just binary?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Consider the decimal number (what we human typically use) 123
    <ul>
      <li>The rightmost column is the 1s column</li>
      <li>The middle, the 10s</li>
      <li>The leftmost, the 100s</li>
      <li>Thus we have 100 x 1 + 10 x 2 + 1 x 3 = 100 + 20 + 3 = 123</li>
    </ul>
  </li>
  <li>Inside a computer, the binary 000 would represent 0, just like in our human world!
    <ul>
      <li>However, in this case we are dealing with binary so:
        <ul>
          <li>The right most column is the 1s place</li>
          <li>The middle, the 2s</li>
          <li>The leftmost, the 4s</li>
        </ul>
      </li>
      <li>In the human world (decimal) we use powers of 10 for place values</li>
      <li>In the computer world (binary) we use powers of 2 for place values</li>
      <li>The difference between decimal numbers and binary numbers is changing the base</li>
      <li>For the binary number 000, we have 4 x 0 + 2 x 0 + 1 x 0 = 0 + 0 + 0 = 0!</li>
    </ul>
  </li>
  <li>Consider the binary number 001:
    <ul>
      <li>We have 4 x 0 + 2 x 0 + 1 x 1 = 0 + 0 + 1 = 1</li>
    </ul>
  </li>
  <li>How do we represent the decimal number 2 in binary?
    <ul>
      <li>We don‚Äôt need a 4, be we need a 2, and also no 1</li>
      <li>This gives us 4 x 0 + 2 x 1 + 1 x 0 = 0 + 2 + 0 = 2</li>
    </ul>
  </li>
  <li>Likewise, the number 3 would be:
    <ul>
      <li>As we need a 2 and a 1</li>
      <li>Thus, 4 x 0 + 2 x 1 + 1 x 1 = 0 + 2 + 1 = 3</li>
    </ul>
  </li>
  <li>Similarly, 4 would be:</li>
  <li>What about 7?
    <ul>
      <li>Which yields 4 x 1 + 2 x 1 + 1 x 1 = 4 + 2 + 1 = 7</li>
    </ul>
  </li>
  <li>What about 8?
    <ul>
      <li>We can‚Äôt count to 8 without another bit (binary digit)
        <ul>
          <li>We run into this in the real world too if we need a four-digit number vs a 3-digit number
            <ul>
              <li>Start with the 1s, 10s, 100s place and add the 1000s</li>
            </ul>
          </li>
          <li>Here we‚Äôll add the next power of 2, 8</li>
          <li>8 x 1 + 4 x 0 + 2 x 0 + 1 x 0 = 8</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Even though computers only use binary, they can count as high as humans can!
    <ul>
      <li>They do it with a smaller vocabulary, just 1 and 0.
        <ul>
          <li>This is because it‚Äôs easier to represent two states in the physical world
            <ul>
              <li>If you think of one of these bits as being a light bulb:
                <ul>
                  <li>0 is off</li>
                  <li>1 is on</li>
                </ul>
              </li>
              <li>Light bulbs just need electricity to turn on or off</li>
              <li>Electricity is sufficient to turn a switch on or off
                <ul>
                  <li>Inside a computer exists these switches called transistors
                    <ul>
                      <li>Modern computers have billions!</li>
                      <li>Turned off represents 0</li>
                      <li>Turned on represents 1</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Using these transistors we can store values, store data, compute, and do everything we can with computers</li>
  <li>David demonstrates how transistors work using light bulbs</li>
  <li>So far all that we can represent is numbers
    <ul>
      <li>A decision needs to be made on what pattern of 1s and 0s to represent letters, words, and paragraphs</li>
      <li>All computers can store is 0s and 1s</li>
      <li>To represent letters, we need a mapping of 0s and 1s to characters
        <ul>
          <li>ASCII (American Standard Code for Information Interchange) does this</li>
          <li>65 -&gt; A, 66 -&gt; B, 67 -&gt; C, etc.</li>
          <li>97 -&gt; a, 98 -&gt; b, 99 -&gt; c, etc.</li>
          <li>ASCII also has mapping for punctuation symbols</li>
        </ul>
      </li>
      <li>Programs like notepad, textedit, and MicroSoft Word decide weather to display patterns of bits as letters or words
        <ul>
          <li>Computers only store 0s and 1s, but the programs interpret those bits in a certain way
            <ul>
              <li>For example, if MicroSoft word sees a pattern of buts representing the number 65, it will interpret that as ‚ÄúA‚Äù</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>ASCII is limited
        <ul>
          <li>Original ASCII is 7 bits, thus giving 128 characters
            <ul>
              <li>Extended ASCII is 8 bits, yielding 256 characters</li>
            </ul>
          </li>
          <li>Many symbols are not represented</li>
        </ul>
      </li>
      <li>UNICODE is a bigger set of characters that includes written languages other than English and even emoji! üò≤
        <ul>
          <li>All are still represented by a pattern of bits</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Consider this pattern of bits: 01001000 01001001
    <ul>
      <li>16 bits or 2 bytes (1 byte = 8 bits)</li>
      <li>Using ASCII we get the word ‚ÄúHI‚Äù</li>
    </ul>
  </li>
</ul>
:ET